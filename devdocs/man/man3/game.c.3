.TH "src/game.c" 3 "Tue Dec 5 2017" "stdgame" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/game.c \- Game initialisation and game loop\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <stdio\&.h>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <math\&.h>\fP
.br
\fC#include <time\&.h>\fP
.br
\fC#include 'stdgame\&.h'\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "static void \fBinitShaderUniforms\fP (\fBGameInstance\fP *this)"
.br
.RI "Initialize shader uniforms\&. "
.ti -1c
.RI "static void \fBprocessDobjAction\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process Dobj action\&. "
.ti -1c
.RI "static void \fBprocessAobjAction\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process Aobj action\&. "
.ti -1c
.RI "static void \fBprocessLightAction\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process \fBLight\fP action\&. "
.ti -1c
.RI "static void \fBprocessObjPhysics\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process Object Physics action\&. "
.ti -1c
.RI "static void \fBprocessVictory\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process victory action\&. "
.ti -1c
.RI "static void \fBprocessLose\fP (\fBGameInstance\fP *this, \fBAction\fP *action)"
.br
.RI "Process lose action\&. "
.ti -1c
.RI "static GLfloat \fBanimatePlayer\fP (\fBGameInstance\fP *this, GLfloat deltaMoveX, GLfloat delta, \fBActiveObjectInstance\fP *playerObj)"
.br
.RI "Animate player\&. "
.ti -1c
.RI "static GLfloat \fBcheckMoveX\fP (\fBGameInstance\fP *this, GLfloat deltaMoveX)"
.br
.RI "Move player in X dimension\&. "
.ti -1c
.RI "static GLfloat \fBcheckMoveY\fP (\fBGameInstance\fP *this, GLfloat deltaMoveY)"
.br
.RI "Move player in Y dimension\&. "
.ti -1c
.RI "static void \fBperformRegions\fP (\fBGameInstance\fP *this)"
.br
.RI "Perform regions\&. "
.ti -1c
.RI "static void \fBperformGUI\fP (\fBGameInstance\fP *this)"
.br
.RI "Perform ingame GUI\&. "
.ti -1c
.RI "static void \fBperformReferencePoints\fP (\fBGameInstance\fP *this)"
.br
.RI "Perform reference points\&. "
.ti -1c
.RI "static void \fBonLogicIngame\fP (\fBGameInstance\fP *this, GLfloat delta)"
.br
.RI "Ingame subrenderer method\&. "
.ti -1c
.RI "static void \fBonLogicMenu\fP (\fBGameInstance\fP *this, GLfloat delta)"
.br
.RI "\fBMenu\fP subrenderer method\&. "
.ti -1c
.RI "static GLfloat \fBgetDelta\fP (void)"
.br
.RI "Ellapsed time getter and calculator\&. "
.ti -1c
.RI "static void \fBcalcLights\fP (\fBGameInstance\fP *this)"
.br
.RI "Calculate and finalize the lights\&. "
.ti -1c
.RI "static void \fBloadTileVAO\fP (const \fBGameInstance\fP *this)"
.br
.RI "Load the tile VAO\&. "
.ti -1c
.RI "void \fBgameInit\fP (\fBGameInstance\fP *this)"
.br
.RI "Initialize game, loads shader and call other init methods\&. "
.ti -1c
.RI "void \fBupdateCamera\fP (\fBGameInstance\fP *this)"
.br
.RI "Updates the camera position\&. "
.ti -1c
.RI "void \fBdebugLight\fP (\fBGameInstance\fP *this)"
.br
.RI "Used for debugging lights\&. "
.ti -1c
.RI "void \fBonRender\fP (\fBGameInstance\fP *this)"
.br
.RI "The renderer method\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquared2D\fP (GLfloat a[3], GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquared2DDelta\fP (GLfloat a[3], GLfloat deltaA[3], GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquaredXY\fP (GLfloat x, GLfloat y, GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLboolean \fBisActionPerformed\fP (\fBGameInstance\fP *this, \fBInputActionWrapper\fP *iaw)"
.br
.RI "Checks if an action key is used\&. "
.ti -1c
.RI "GLboolean \fBisPlayerInRegion\fP (\fBGameInstance\fP *this, \fBRegion\fP *region)"
.br
.RI "Checks if the player is in the specifide region\&. "
.ti -1c
.RI "void \fBactivateAction\fP (\fBGameInstance\fP *this, GLint id)"
.br
.RI "Activate action\&. "
.ti -1c
.RI "static void \fBupdateSpells\fP (\fBGameInstance\fP *this)"
.br
.RI "Updates the spells\&. "
.ti -1c
.RI "void \fBonLogic\fP (\fBGameInstance\fP *this)"
.br
.RI "The calculator method\&. "
.in -1c
.SH "Detailed Description"
.PP 
Game initialisation and game loop\&. 


.PP
\fBAuthor:\fP
.RS 4
Gerviba (Szabo Gergely) 
.RE
.PP
\fBHeader:\fP
.RS 4
\fBgame\&.h\fP 
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "void activateAction (\fBGameInstance\fP * this, GLint id)"

.PP
Activate action\&. 
.PP
\fBSee also:\fP
.RS 4
fileformats\&.md -> \fBActionType\fP values 
.PP
\fBAction\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIid\fP The not unique id of the action 
.RE
.PP

.SS "static GLfloat animatePlayer (\fBGameInstance\fP * this, GLfloat deltaMoveX, GLfloat delta, \fBActiveObjectInstance\fP * playerObj)\fC [static]\fP"

.PP
Animate player\&. 
.PP
\fBSee also:\fP
.RS 4
fileformats\&.md -> \fBActionType\fP values 
.PP
\fBAction\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIid\fP The not unique id of the action 
.RE
.PP

.SS "static void calcLights (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Calculate and finalize the lights\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static GLfloat checkMoveX (\fBGameInstance\fP * this, GLfloat deltaMoveX)\fC [static]\fP"

.PP
Move player in X dimension\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIdeltaMoveX\fP Delta move in X dimension 
.RE
.PP

.SS "static GLfloat checkMoveY (\fBGameInstance\fP * this, GLfloat deltaMoveY)\fC [static]\fP"

.PP
Move player in Y dimension\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIdeltaMoveX\fP Delta move in Y dimension 
.RE
.PP

.SS "void debugLight (\fBGameInstance\fP * this)"

.PP
Used for debugging lights\&. Draws a comma for every lights
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "void gameInit (\fBGameInstance\fP * this)"

.PP
Initialize game, loads shader and call other init methods\&. It also loads the main menu as a default menu\&.
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static GLfloat getDelta (void)\fC [static]\fP"

.PP
Ellapsed time getter and calculator\&. 
.PP
\fBReturns:\fP
.RS 4
Ellapsed time (form last call) 
.RE
.PP

.SS "GLfloat getDistSquared2D (GLfloat a[3], GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First 3D position 
.br
\fIb\fP Second 3D position 
.RE
.PP

.SS "GLfloat getDistSquared2DDelta (GLfloat a[3], GLfloat deltaA[3], GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. The deltaA will be added to the a coordinate safely\&. There will be no side effects\&.
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First 3D position 
.br
\fIdeltaA\fP First 3D position delta 
.br
\fIb\fP Second 3D position 
.RE
.PP

.SS "GLfloat getDistSquaredXY (GLfloat x, GLfloat y, GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinate 
.br
\fIy\fP Y coordinate 
.br
\fIb\fP The other position (3D) 
.RE
.PP

.SS "static void initShaderUniforms (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Initialize shader uniforms\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "GLboolean isActionPerformed (\fBGameInstance\fP * this, \fBInputActionWrapper\fP * iaw)"

.PP
Checks if an action key is used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIiaw\fP \fBAction\fP key type 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the selected key is currently pressed 
.RE
.PP

.SS "GLboolean isPlayerInRegion (\fBGameInstance\fP * this, \fBRegion\fP * region)"

.PP
Checks if the player is in the specifide region\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIregion\fP The specified region 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the player is in this region 
.RE
.PP

.SS "static void loadTileVAO (const \fBGameInstance\fP * this)\fC [static]\fP"

.PP
Load the tile VAO\&. This VertexArrayObject will be used in every cube\&.
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP
(3 x \fBPosition\fP, 2 x \fBTexture\fP coord, 3 x Normal vectors) x 4 
.SS "void onLogic (\fBGameInstance\fP * this)"

.PP
The calculator method\&. It calls all the required logic functions
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void onLogicIngame (\fBGameInstance\fP * this, GLfloat delta)\fC [static]\fP"

.PP
Ingame subrenderer method\&. Called when: GameInstance->state = INGAME
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIdelta\fP Ellapsed time 
.RE
.PP

.SS "static void onLogicMenu (\fBGameInstance\fP * this, GLfloat delta)\fC [static]\fP"

.PP
\fBMenu\fP subrenderer method\&. Called when: GameInstance->state = MENU
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIdelta\fP Ellapsed time 
.RE
.PP

.SS "void onRender (\fBGameInstance\fP * this)"

.PP
The renderer method\&. This method will call all the renderer methods needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void performGUI (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Perform ingame GUI\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void performReferencePoints (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Perform reference points\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void performRegions (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Perform regions\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void processAobjAction (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process Aobj action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "static void processDobjAction (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process Dobj action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "static void processLightAction (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process \fBLight\fP action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "static void processLose (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process lose action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "static void processObjPhysics (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process Object Physics action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "static void processVictory (\fBGameInstance\fP * this, \fBAction\fP * action)\fC [static]\fP"

.PP
Process victory action\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIaction\fP The specified action 
.RE
.PP

.SS "void updateCamera (\fBGameInstance\fP * this)"

.PP
Updates the camera position\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "static void updateSpells (\fBGameInstance\fP * this)\fC [static]\fP"

.PP
Updates the spells\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for stdgame from the source code\&.
