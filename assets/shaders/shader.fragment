#version 150 core

const vec3 AMBIENT = vec3(0.3, 0.3, 0.3); //vec3(0.4, 0.4, 0.4);//vec3(0.1, 0.1, 0.1);
const float MAX_DIST = 3; //2.5;
const float MAX_DIST_SQUARED = MAX_DIST * MAX_DIST;

uniform vec3 lightColor[28]; // TODO: Optimize array size (with buffers?)
uniform vec3 lightInfo[28];
uniform sampler2D tex;
uniform int numLights;
uniform vec4 baseColor;

in vec2 passTexCoord;
in vec3 fragmentNormal;
in vec3 cameraVector;
in vec3 lightVector[28];

out vec4 outColor;

void main() {
	vec3 diffuse = vec3(0.0, 0.0, 0.0);
	vec3 specular = vec3(0.0, 0.0, 0.0);

	vec3 normal = normalize(fragmentNormal);
	vec3 cameraDir = normalize(cameraVector);

	for (int i = 0; i < numLights; ++i) {
		float dist = min(dot(lightVector[i], lightVector[i]), MAX_DIST_SQUARED * lightInfo[i][1]) 
				/ (MAX_DIST_SQUARED * lightInfo[i][1]);
		float distFactor = 1.0 - dist;

		vec3 lightDir = normalize(lightVector[i]);
		float diffuseDot = dot(normal, lightDir);
		diffuse += lightColor[i] * clamp(diffuseDot, 0.0, 1.0) * (distFactor * lightInfo[i][1]); 

		if (lightInfo[i][0] > 0) {
			vec3 halfAngle = normalize(cameraDir + lightDir);
			vec3 specularColor = min(lightColor[i] + 0.5, 1.0);
			float specularDot = dot(normal, halfAngle);
			specular += (specularColor * pow(clamp(specularDot, 0.0, 1.0), 300.0 - (lightInfo[i][0] * 300)) 
					* distFactor) * lightInfo[i][2]; 
		}
	}

	vec4 color = texture2D(tex, passTexCoord) * baseColor;
	outColor = vec4(clamp(color.rgb * (diffuse + AMBIENT) + specular, 0.0, 1.0), color.a);
}
