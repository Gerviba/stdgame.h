.TH "src/game.h" 3 "Tue Dec 5 2017" "stdgame" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/game.h \- Game initialisation and game loop (header)  

.SH SYNOPSIS
.br
.PP
\fC#include 'stdgame\&.h'\fP
.br
\fC#include 'font\&.h'\fP
.br
\fC#include 'object\&.h'\fP
.br
\fC#include 'map\&.h'\fP
.br
\fC#include 'player\&.h'\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "struct \fBGameInstance\fP"
.br
.RI "It contains all the data that the game requires\&. "
.ti -1c
.RI "struct \fBInputActionWrapper\fP"
.br
.RI "Input action key and mouse wrapper\&. "
.ti -1c
.RI "struct \fBOptions\fP"
.br
.RI "\fBOptions\fP storage\&. "
.ti -1c
.RI "struct \fBShaderInfo\fP"
.br
.RI "Shader program uniform ids\&. "
.ti -1c
.RI "struct \fBCameraInfo\fP"
.br
.RI "Game camera info storage\&. "
.ti -1c
.RI "struct \fBLigingInfo\fP"
.br
.RI "Finalized light info\&. "
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBMAX_NUM_LIGHTS\fP   28"
.br
.RI "Maximum allowed lights to render\&. "
.ti -1c
.RI "#define \fBCAMERA_DISTANCE\fP   5\&.2"
.br
.RI "Ingame camera distance\&. "
.ti -1c
.RI "#define \fBsetColor\fP(color,  r,  g,  b,  a)   {color[0] = r; color[1] = g; color[2] = b; color[3] = a;}"
.br
.RI "\fBColor\fP value setter\&. "
.ti -1c
.RI "#define \fBsetPosition\fP(position,  x,  y,  z)   {position[0] = x; position[1] = y; position[2] = z;}"
.br
.RI "\fBPosition\fP value setter\&. "
.ti -1c
.RI "#define \fBsetRotation\fP(rotation,  x,  y,  z)   {rotation[0] = x; rotation[1] = y; rotation[2] = z;}"
.br
.RI "Rotation value setter\&. "
.ti -1c
.RI "#define \fBsetScale\fP(scale,  x,  y,  z)   {scale[0] = x; scale[1] = y; scale[2] = z;}"
.br
.RI "Scale value setter\&. "
.ti -1c
.RI "#define \fBsetVelocity\fP(velocity,  x,  y,  z)   {velocity[0] = x; velocity[1] = y; velocity[2] = z;}"
.br
.RI "Velocity value setter\&. "
.ti -1c
.RI "#define \fBsetPositionArray\fP(pos,  from)   {pos[0] = from[0]; pos[1] = from[1]; pos[2] = from[2];}"
.br
.RI "\fBPosition\fP value setter for array argument\&. "
.in -1c
.SS "Enumerations"

.in +1c
.ti -1c
.RI "enum \fBGameState\fP { \fBMENU\fP, \fBINGAME\fP, \fBPAUSE\fP }"
.br
.RI "Game state\&. "
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBgameInit\fP (\fBGameInstance\fP *this)"
.br
.RI "Initialize game, loads shader and call other init methods\&. "
.ti -1c
.RI "void \fBonRender\fP (\fBGameInstance\fP *this)"
.br
.RI "The renderer method\&. "
.ti -1c
.RI "void \fBupdateCamera\fP (\fBGameInstance\fP *this)"
.br
.RI "Updates the camera position\&. "
.ti -1c
.RI "void \fBonLogic\fP (\fBGameInstance\fP *this)"
.br
.RI "The calculator method\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquared2D\fP (GLfloat a[3], GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquared2DDelta\fP (GLfloat a[3], GLfloat deltaA[3], GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLfloat \fBgetDistSquaredXY\fP (GLfloat x, GLfloat y, GLfloat b[3])"
.br
.RI "Calculate squared distance between 2 coordinates\&. "
.ti -1c
.RI "GLboolean \fBisActionPerformed\fP (\fBGameInstance\fP *this, \fBInputActionWrapper\fP *iaw)"
.br
.RI "Checks if an action key is used\&. "
.ti -1c
.RI "GLboolean \fBisPlayerInRegion\fP (\fBGameInstance\fP *this, \fBRegion\fP *region)"
.br
.RI "Checks if the player is in the specifide region\&. "
.ti -1c
.RI "void \fBactivateAction\fP (\fBGameInstance\fP *this, GLint id)"
.br
.RI "Activate action\&. "
.in -1c
.SH "Detailed Description"
.PP 
Game initialisation and game loop (header) 


.PP
\fBAuthor:\fP
.RS 4
Gerviba (Szabo Gergely) 
.RE
.PP
\fBDefinition:\fP
.RS 4
\fBgame\&.c\fP 
.RE
.PP

.SH "Enumeration Type Documentation"
.PP 
.SS "enum \fBGameState\fP"

.PP
Game state\&. 
.PP
\fBEnumerator\fP
.in +1c
.TP
\fB\fIMENU \fP\fP
Main menu like menu\&. 
.TP
\fB\fIINGAME \fP\fP
Ingame GUI with player movement allowed\&. 
.TP
\fB\fIPAUSE \fP\fP
Ingame GUI or menu with player movement and mob timing disabled\&. 
.SH "Function Documentation"
.PP 
.SS "void activateAction (\fBGameInstance\fP * this, GLint id)"

.PP
Activate action\&. 
.PP
\fBSee also:\fP
.RS 4
fileformats\&.md -> \fBActionType\fP values 
.PP
\fBAction\fP
.RE
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIid\fP The not unique id of the action 
.RE
.PP

.SS "void gameInit (\fBGameInstance\fP * this)"

.PP
Initialize game, loads shader and call other init methods\&. It also loads the main menu as a default menu\&.
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "GLfloat getDistSquared2D (GLfloat a[3], GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First 3D position 
.br
\fIb\fP Second 3D position 
.RE
.PP

.SS "GLfloat getDistSquared2DDelta (GLfloat a[3], GLfloat deltaA[3], GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. The deltaA will be added to the a coordinate safely\&. There will be no side effects\&.
.PP
\fBParameters:\fP
.RS 4
\fIa\fP First 3D position 
.br
\fIdeltaA\fP First 3D position delta 
.br
\fIb\fP Second 3D position 
.RE
.PP

.SS "GLfloat getDistSquaredXY (GLfloat x, GLfloat y, GLfloat b[3])"

.PP
Calculate squared distance between 2 coordinates\&. 
.PP
\fBParameters:\fP
.RS 4
\fIx\fP X coordinate 
.br
\fIy\fP Y coordinate 
.br
\fIb\fP The other position (3D) 
.RE
.PP

.SS "GLboolean isActionPerformed (\fBGameInstance\fP * this, \fBInputActionWrapper\fP * iaw)"

.PP
Checks if an action key is used\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIiaw\fP \fBAction\fP key type 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the selected key is currently pressed 
.RE
.PP

.SS "GLboolean isPlayerInRegion (\fBGameInstance\fP * this, \fBRegion\fP * region)"

.PP
Checks if the player is in the specifide region\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.br
\fIregion\fP The specified region 
.RE
.PP
\fBReturns:\fP
.RS 4
true if the player is in this region 
.RE
.PP

.SS "void onLogic (\fBGameInstance\fP * this)"

.PP
The calculator method\&. It calls all the required logic functions
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "void onRender (\fBGameInstance\fP * this)"

.PP
The renderer method\&. This method will call all the renderer methods needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SS "void updateCamera (\fBGameInstance\fP * this)"

.PP
Updates the camera position\&. 
.PP
\fBParameters:\fP
.RS 4
\fIthis\fP Actual \fBGameInstance\fP instance 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for stdgame from the source code\&.
